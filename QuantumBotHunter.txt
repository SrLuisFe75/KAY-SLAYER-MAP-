import React, { useState, useEffect, useRef } from 'react';
import { Play, Pause, RotateCcw, Zap, Search, AlertTriangle, CheckCircle } from 'lucide-react';

const QuantumBotHunter = () => {
  const [isRunning, setIsRunning] = useState(false);
  const [quantumStates, setQuantumStates] = useState([]);
  const [detectedBots, setDetectedBots] = useState([]);
  const [superpositionData, setSuperpositionData] = useState({});
  const [parallelAnalysis, setParallelAnalysis] = useState({});
  const intervalRef = useRef(null);

  // Simulación de Sycamore - 53 qubits simulados para análisis paralelo
  const sycamoreQubits = 53;
  
  // Estados cuánticos simulados para diferentes patrones de comportamiento
  const initializeQuantumStates = () => {
    const users = Array.from({length: 20}, (_, i) => ({
      id: `user_${i + 1}`,
      platform: ['uber', 'instacart', 'amazonFlex', 'doordash'][Math.floor(Math.random() * 4)],
      responseTime: Math.random() * 2000 + 50, // 50ms - 2050ms
      activityPattern: Math.random(),
      geoConsistency: Math.random(),
      selectivityIndex: Math.random(),
      quantumAmplitude: Math.random() * 2 - 1, // -1 to 1
      entangledWith: []
    }));

    setQuantumStates(users);
    
    // Crear superposición inicial
    const superposition = {};
    users.forEach(user => {
      superposition[user.id] = {
        botProbability: 0.5, // Estado de superposición
        humanProbability: 0.5,
        collapsed: false,
        measurements: []
      };
    });
    setSuperpositionData(superposition);
  };

  // Algoritmo cuántico simulado para detección de patrones
  const quantumPatternDetection = (user) => {
    // Simulación de interferencia cuántica para amplificar patrones sospechosos
    const suspiciousFactors = [
      user.responseTime < 100 ? 0.8 : 0.2, // Respuesta ultra-rápida
      user.activityPattern > 0.95 ? 0.9 : 0.1, // Actividad 24/7
      user.geoConsistency < 0.3 ? 0.7 : 0.3, // Teletransportación
      user.selectivityIndex > 0.8 ? 0.6 : 0.4 // Solo pedidos premium
    ];

    // Aplicar transformada cuántica de Fourier simulada
    const qftResult = suspiciousFactors.reduce((acc, factor, index) => {
      return acc + factor * Math.cos(index * Math.PI / 4);
    }, 0) / suspiciousFactors.length;

    // Amplificación cuántica de Grover simulada
    const groverAmplification = Math.pow(qftResult, 1.5);
    
    return Math.min(groverAmplification, 1);
  };

  // Paralelismo cuántico - procesar múltiples usuarios simultáneamente
  const quantumParallelAnalysis = () => {
    const results = {};
    
    // Simular procesamiento paralelo en múltiples qubits
    quantumStates.forEach(user => {
      const botProbability = quantumPatternDetection(user);
      
      // Colapso de función de onda cuando la probabilidad supera el umbral
      if (botProbability > 0.7) {
        setSuperpositionData(prev => ({
          ...prev,
          [user.id]: {
            ...prev[user.id],
            botProbability: botProbability,
            humanProbability: 1 - botProbability,
            collapsed: true,
            measurements: [...(prev[user.id]?.measurements || []), botProbability]
          }
        }));

        // Entrelazamiento cuántico - usuarios relacionados
        const entangledUsers = quantumStates.filter(u => 
          u.platform === user.platform && 
          Math.abs(u.responseTime - user.responseTime) < 50
        );

        results[user.id] = {
          user,
          botProbability,
          confidence: botProbability > 0.8 ? 'HIGH' : 'MEDIUM',
          entangledUsers: entangledUsers.map(u => u.id),
          quantumFeatures: {
            coherenceTime: Math.random() * 100,
            decoherenceRate: botProbability * 0.1,
            fidelity: 1 - (botProbability * 0.2)
          }
        };
      }
    });

    setParallelAnalysis(results);
    
    // Actualizar lista de bots detectados
    const newBots = Object.values(results).filter(r => r.botProbability > 0.7);
    setDetectedBots(prev => {
      const existing = prev.map(b => b.user.id);
      const fresh = newBots.filter(b => !existing.includes(b.user.id));
      return [...prev, ...fresh];
    });
  };

  // Simulación del procesador Sycamore
  const runSycamoreSimulation = () => {
    if (!isRunning) return;

    // Actualizar estados cuánticos
    setQuantumStates(prev => prev.map(user => ({
      ...user,
      responseTime: user.responseTime + (Math.random() - 0.5) * 100,
      activityPattern: Math.min(1, user.activityPattern + (Math.random() - 0.5) * 0.2),
      geoConsistency: Math.max(0, user.geoConsistency + (Math.random() - 0.5) * 0.3),
      selectivityIndex: Math.min(1, user.selectivityIndex + (Math.random() - 0.5) * 0.2),
      quantumAmplitude: Math.sin(Date.now() / 1000 + user.id.charCodeAt(7)) // Oscilación cuántica
    })));

    quantumParallelAnalysis();
  };

  useEffect(() => {
    if (isRunning) {
      intervalRef.current = setInterval(runSycamoreSimulation, 1500);
    } else {
      clearInterval(intervalRef.current);
    }
    return () => clearInterval(intervalRef.current);
  }, [isRunning, quantumStates]);

  useEffect(() => {
    initializeQuantumStates();
  }, []);

  const startHunting = () => {
    setIsRunning(true);
  };

  const stopHunting = () => {
    setIsRunning(false);
  };

  const reset = () => {
    setIsRunning(false);
    setDetectedBots([]);
    initializeQuantumStates();
    setParallelAnalysis({});
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 text-white p-6">
      <div className="max-w-7xl mx-auto">
        <header className="text-center mb-8">
          <h1 className="text-4xl font-bold mb-2 flex items-center justify-center gap-3">
            <Zap className="text-yellow-400" />
            Quantum Bot Hunter
            <Search className="text-blue-400" />
          </h1>
          <p className="text-xl text-blue-200">
            Sistema de detección cuántica basado en principios de Sycamore
          </p>
          <div className="mt-4 flex justify-center gap-4">
            <button
              onClick={startHunting}
              disabled={isRunning}
              className="flex items-center gap-2 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 px-6 py-3 rounded-lg font-semibold transition-colors"
            >
              <Play size={20} />
              Iniciar Caza Cuántica
            </button>
            <button
              onClick={stopHunting}
              disabled={!isRunning}
              className="flex items-center gap-2 bg-red-600 hover:bg-red-700 disabled:bg-gray-600 px-6 py-3 rounded-lg font-semibold transition-colors"
            >
              <Pause size={20} />
              Pausar
            </button>
            <button
              onClick={reset}
              className="flex items-center gap-2 bg-gray-600 hover:bg-gray-700 px-6 py-3 rounded-lg font-semibold transition-colors"
            >
              <RotateCcw size={20} />
              Reset
            </button>
          </div>
        </header>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
          {/* Panel de Estados Cuánticos */}
          <div className="bg-black/30 backdrop-blur-sm rounded-xl p-6 border border-purple-500/30">
            <h2 className="text-2xl font-bold mb-4 text-purple-300">Estados Cuánticos de Usuarios</h2>
            <div className="space-y-2 max-h-96 overflow-y-auto">
              {quantumStates.slice(0, 10).map(user => (
                <div key={user.id} className="bg-purple-900/30 rounded-lg p-3 border border-purple-500/20">
                  <div className="flex justify-between items-center mb-2">
                    <span className="font-semibold text-purple-200">{user.id}</span>
                    <span className="text-sm text-gray-300 capitalize">{user.platform}</span>
                  </div>
                  <div className="grid grid-cols-2 gap-2 text-xs">
                    <div>Respuesta: {user.responseTime.toFixed(0)}ms</div>
                    <div>Actividad: {(user.activityPattern * 100).toFixed(0)}%</div>
                    <div>Geo: {(user.geoConsistency * 100).toFixed(0)}%</div>
                    <div>Selectividad: {(user.selectivityIndex * 100).toFixed(0)}%</div>
                  </div>
                  <div className="mt-2">
                    <div className="w-full bg-gray-700 rounded-full h-2">
                      <div 
                        className="bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full transition-all duration-300"
                        style={{width: `${(user.quantumAmplitude + 1) * 50}%`}}
                      ></div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Panel de Superposición */}
          <div className="bg-black/30 backdrop-blur-sm rounded-xl p-6 border border-blue-500/30">
            <h2 className="text-2xl font-bold mb-4 text-blue-300">Superposición Cuántica</h2>
            <div className="space-y-3 max-h-96 overflow-y-auto">
              {Object.entries(superpositionData).slice(0, 8).map(([userId, state]) => (
                <div key={userId} className="bg-blue-900/30 rounded-lg p-3 border border-blue-500/20">
                  <div className="flex justify-between items-center mb-2">
                    <span className="font-semibold text-blue-200">{userId}</span>
                    <span className={`text-xs px-2 py-1 rounded ${state.collapsed ? 'bg-red-600' : 'bg-yellow-600'}`}>
                      {state.collapsed ? 'Colapsado' : 'Superposición'}
                    </span>
                  </div>
                  <div className="grid grid-cols-2 gap-2 text-xs">
                    <div>Bot: {(state.botProbability * 100).toFixed(1)}%</div>
                    <div>Humano: {(state.humanProbability * 100).toFixed(1)}%</div>
                  </div>
                  {state.measurements.length > 0 && (
                    <div className="mt-2 text-xs text-gray-300">
                      Mediciones: {state.measurements.length}
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Panel de Bots Detectados */}
        <div className="bg-black/30 backdrop-blur-sm rounded-xl p-6 border border-red-500/30">
          <h2 className="text-2xl font-bold mb-4 text-red-300 flex items-center gap-2">
            <AlertTriangle />
            Bots Detectados ({detectedBots.length})
          </h2>
          {detectedBots.length === 0 ? (
            <div className="text-center py-8 text-gray-400">
              <CheckCircle size={48} className="mx-auto mb-4 text-green-400" />
              <p>No se han detectado bots sospechosos</p>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {detectedBots.map((detection, index) => (
                <div key={index} className="bg-red-900/30 rounded-lg p-4 border border-red-500/20">
                  <div className="flex justify-between items-center mb-3">
                    <h3 className="font-bold text-red-200">{detection.user.id}</h3>
                    <span className={`px-2 py-1 rounded text-xs ${
                      detection.confidence === 'HIGH' ? 'bg-red-600' : 'bg-orange-600'
                    }`}>
                      {detection.confidence}
                    </span>
                  </div>
                  <div className="space-y-1 text-sm">
                    <div>Plataforma: <span className="capitalize">{detection.user.platform}</span></div>
                    <div>Probabilidad Bot: {(detection.botProbability * 100).toFixed(1)}%</div>
                    <div>Tiempo Respuesta: {detection.user.responseTime.toFixed(0)}ms</div>
                    <div>Coherencia Cuántica: {detection.quantumFeatures.coherenceTime.toFixed(1)}ms</div>
                    <div>Fidelidad: {(detection.quantumFeatures.fidelity * 100).toFixed(1)}%</div>
                  </div>
                  {detection.entangledUsers.length > 0 && (
                    <div className="mt-3 pt-3 border-t border-red-500/20">
                      <div className="text-xs text-red-300">
                        Entrelazado con: {detection.entangledUsers.length} usuarios
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Info Panel */}
        <div className="mt-6 bg-black/20 backdrop-blur-sm rounded-xl p-6 border border-gray-500/30">
          <h3 className="text-lg font-bold mb-3 text-yellow-300">Tecnología Cuántica Simulada</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <div>
              <strong className="text-blue-300">Superposición:</strong> Analiza múltiples estados de comportamiento simultáneamente
            </div>
            <div>
              <strong className="text-purple-300">Paralelismo:</strong> Procesa {sycamoreQubits} patrones de usuario en paralelo
            </div>
            <div>
              <strong className="text-green-300">Entrelazamiento:</strong> Detecta correlaciones entre usuarios sospechosos
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default QuantumBotHunter;
