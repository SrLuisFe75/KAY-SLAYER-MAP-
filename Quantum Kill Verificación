import React, { useState, useEffect, useRef } from 'react';
import { 
  Target, 
  CheckCircle2, 
  XCircle,
  Clock,
  Eye,
  Activity,
  TrendingDown,
  AlertTriangle,
  Skull,
  Heart,
  Zap,
  RefreshCw,
  Search,
  MapPin,
  Calendar,
  BarChart3,
  Timer,
  Crosshair,
  Shield,
  Radar,
  Database,
  LineChart,
  TrendingUp,
  Users,
  Ghost
} from 'lucide-react';

const KillVerificationSystem = () => {
  const [trackedTargets, setTrackedTargets] = useState([]);
  const [verificationResults, setVerificationResults] = useState([]);
  const [monitoringStatus, setMonitoringStatus] = useState('active');
  const [timeWindow, setTimeWindow] = useState(24); // horas de seguimiento post-ataque
  
  const [verificationMetrics, setVerificationMetrics] = useState({
    totalAttacks: 0,
    confirmedKills: 0,
    partialDisruptions: 0,
    resurrections: 0,
    falsePositives: 0,
    killRate: 0
  });

  const [realTimeMonitoring, setRealTimeMonitoring] = useState({
    activeTargets: 0,
    deadTargets: 0,
    zombieTargets: 0, // Parcialmente activos
    awaitingConfirmation: 0
  });

  // Simular targets bajo seguimiento post-ataque
  useEffect(() => {
    // Generar algunos targets para demo
    const initialTargets = [
      {
        id: 'bot_uber_001',
        platform: 'uber',
        attackTime: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 horas atrás
        attackType: 'quantum_decoherence',
        preAttackMetrics: {
          avgResponseTime: 45,
          ordersPerHour: 12,
          activeHours: 18,
          successRate: 95
        },
        status: 'monitoring',
        lastActivity: new Date(Date.now() - 15 * 60 * 1000),
        resurrections: 0
      },
      {
        id: 'bot_instacart_002', 
        platform: 'instacart',
        attackTime: new Date(Date.now() - 6 * 60 * 60 * 1000), // 6 horas atrás
        attackType: 'poison_gradual',
        preAttackMetrics: {
          avgResponseTime: 32,
          ordersPerHour: 8,
          activeHours: 20,
          successRate: 88
        },
        status: 'potentially_dead',
        lastActivity: new Date(Date.now() - 4 * 60 * 60 * 1000),
        resurrections: 1
      }
    ];
    
    setTrackedTargets(initialTargets);
  }, []);

  // Sistema de monitoreo continuo
  useEffect(() => {
    if (monitoringStatus === 'active') {
      const monitoringInterval = setInterval(() => {
        // Simular verificación de actividad de targets
        setTrackedTargets(prev => prev.map(target => {
          const hoursSinceAttack = (Date.now() - target.attackTime.getTime()) / (1000 * 60 * 60);
          
          // Simular diferentes estados post-ataque
          if (hoursSinceAttack > timeWindow) {
            return { ...target, status: 'verification_complete' };
          }
          
          // Probabilidad de actividad basada en tipo de ataque
          const activityChance = getActivityChance(target.attackType, hoursSinceAttack);
          
          if (Math.random() < activityChance) {
            // Bot mostró actividad
            const newActivity = new Date();
            const newMetrics = generatePostAttackMetrics(target);
            
            return {
              ...target,
              lastActivity: newActivity,
              postAttackMetrics: newMetrics,
              status: determineStatus(target, newMetrics)
            };
          }
          
          return target;
        }));

        // Actualizar métricas en tiempo real
        updateRealTimeMetrics();
      }, 5000); // Check cada 5 segundos

      return () => clearInterval(monitoringInterval);
    }
  }, [monitoringStatus, timeWindow]);

  const getActivityChance = (attackType, hoursSinceAttack) => {
    const baseChances = {
      'quantum_decoherence': 0.02, // Muy bajo - ataque letal
      'poison_gradual': 0.15 - (hoursSinceAttack * 0.02), // Decrece con tiempo
      'sleep_mode': 0.05, // Bajo mientras duerme
      'interference': 0.3, // Moderado - puede recuperarse
      'network_disruption': 0.25
    };
    
    return Math.max(0, baseChances[attackType] || 0.1);
  };

  const generatePostAttackMetrics = (target) => {
    const degradationFactor = Math.random() * 0.7 + 0.1; // 10-80% degradación
    
    return {
      avgResponseTime: target.preAttackMetrics.avgResponseTime * (1 + Math.random() * 2),
      ordersPerHour: Math.floor(target.preAttackMetrics.ordersPerHour * degradationFactor),
      activeHours: Math.floor(target.preAttackMetrics.activeHours * degradationFactor),
      successRate: Math.floor(target.preAttackMetrics.successRate * degradationFactor),
      errorRate: Math.random() * 40 + 5, // 5-45% errores
      lastSeen: new Date()
    };
  };

  const determineStatus = (target, postMetrics) => {
    if (!postMetrics) return 'no_activity';
    
    const performanceDrop = 1 - (postMetrics.ordersPerHour / target.preAttackMetrics.ordersPerHour);
    
    if (performanceDrop > 0.9) return 'critically_damaged';
    if (performanceDrop > 0.6) return 'severely_damaged'; 
    if (performanceDrop > 0.3) return 'moderately_damaged';
    if (postMetrics.errorRate > 30) return 'malfunctioning';
    
    return 'partially_active';
  };

  const updateRealTimeMetrics = () => {
    setRealTimeMonitoring(prev => {
      const active = trackedTargets.filter(t => ['partially_active', 'malfunctioning'].includes(t.status)).length;
      const dead = trackedTargets.filter(t => ['no_activity', 'critically_damaged'].includes(t.status)).length;
      const zombie = trackedTargets.filter(t => ['severely_damaged', 'moderately_damaged'].includes(t.status)).length;
      const awaiting = trackedTargets.filter(t => t.status === 'monitoring').length;
      
      return {
        activeTargets: active,
        deadTargets: dead,
        zombieTargets: zombie,
        awaitingConfirmation: awaiting
      };
    });
  };

  // Generar reporte de verificación
  const generateVerificationReport = (target) => {
    const hoursSinceAttack = (Date.now() - target.attackTime.getTime()) / (1000 * 60 * 60);
    const hoursSinceLastActivity = target.lastActivity ? 
      (Date.now() - target.lastActivity.getTime()) / (1000 * 60 * 60) : 999;

    let verdict = 'UNKNOWN';
    let confidence = 0;
    let recommendation = '';

    if (hoursSinceLastActivity > 12) {
      verdict = 'CONFIRMED KILL';
      confidence = 95;
      recommendation = 'Target eliminated successfully';
    } else if (target.postAttackMetrics) {
      const performanceDrop = 1 - (target.postAttackMetrics.ordersPerHour / target.preAttackMetrics.ordersPerHour);
      
      if (performanceDrop > 0.8) {
        verdict = 'CRITICALLY DAMAGED';
        confidence = 85;
        recommendation = 'Target severely compromised, likely to fail soon';
      } else if (performanceDrop > 0.5) {
        verdict = 'MAJOR DISRUPTION';
        confidence = 70;
        recommendation = 'Significant damage inflicted, monitor for recovery';
      } else if (performanceDrop > 0.2) {
        verdict = 'MINOR DAMAGE';
        confidence = 60;
        recommendation = 'Limited impact, consider stronger attack';
      } else {
        verdict = 'FAILED ATTACK';
        confidence = 50;
        recommendation = 'Target resistant or attack ineffective';
      }
    }

    return {
      id: `report_${target.id}_${Date.now()}`,
      targetId: target.id,
      verdict,
      confidence,
      recommendation,
      timestamp: new Date(),
      metrics: {
        hoursSinceAttack: hoursSinceAttack.toFixed(1),
        hoursSinceLastActivity: hoursSinceLastActivity.toFixed(1),
        performanceDropoff: target.postAttackMetrics ? 
          ((1 - (target.postAttackMetrics.ordersPerHour / target.preAttackMetrics.ordersPerHour)) * 100).toFixed(1) + '%' : 'N/A'
      }
    };
  };

  const performDeepVerification = (targetId) => {
    const target = trackedTargets.find(t => t.id === targetId);
    if (!target) return;

    const report = generateVerificationReport(target);
    setVerificationResults(prev => [report, ...prev.slice(0, 9)]); // Últimos 10

    // Actualizar métricas globales
    setVerificationMetrics(prev => ({
      ...prev,
      totalAttacks: prev.totalAttacks + 1,
      confirmedKills: report.verdict === 'CONFIRMED KILL' ? prev.confirmedKills + 1 : prev.confirmedKills,
      partialDisruptions: report.verdict.includes('DAMAGE') ? prev.partialDisruptions + 1 : prev.partialDisruptions,
      killRate: ((prev.confirmedKills / Math.max(1, prev.totalAttacks)) * 100)
    }));
  };

  const getStatusColor = (status) => {
    const colors = {
      'monitoring': 'text-blue-400',
      'no_activity': 'text-green-400',
      'critically_damaged': 'text-red-400', 
      'severely_damaged': 'text-orange-400',
      'moderately_damaged': 'text-yellow-400',
      'malfunctioning': 'text-purple-400',
      'partially_active': 'text-gray-400',
      'verification_complete': 'text-cyan-400'
    };
    return colors[status] || 'text-gray-400';
  };

  const getStatusIcon = (status) => {
    const icons = {
      'monitoring': Eye,
      'no_activity': Skull,
      'critically_damaged': XCircle,
      'severely_damaged': AlertTriangle,
      'moderately_damaged': TrendingDown,
      'malfunctioning': Zap,
      'partially_active': Activity,
      'verification_complete': CheckCircle2
    };
    const IconComponent = icons[status] || Clock;
    return <IconComponent size={16} />;
  };

  const getVerdictColor = (verdict) => {
    if (verdict === 'CONFIRMED KILL') return 'text-green-400';
    if (verdict.includes('DAMAGE')) return 'text-orange-400';
    if (verdict === 'FAILED ATTACK') return 'text-red-400';
    return 'text-gray-400';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-slate-900 to-black text-white">
      {/* Header del sistema de verificación */}
      <div className="bg-black/60 backdrop-blur-sm border-b border-green-500/30 p-6">
        <div className="max-w-7xl mx-auto">
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center gap-4">
              <Target className="text-green-400 animate-pulse" size={40} />
              <div>
                <h1 className="text-3xl font-bold text-green-300">Kill Verification System</h1>
                <p className="text-gray-300">Confirmación de Eliminación y Seguimiento Post-Ataque</p>
              </div>
            </div>
            
            <div className="text-right">
              <div className="text-3xl font-bold text-green-400">
                {verificationMetrics.killRate.toFixed(1)}%
              </div>
              <div className="text-sm text-gray-300">Tasa de Eliminación</div>
            </div>
          </div>

          {/* Métricas principales */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="bg-black/40 rounded-lg p-4">
              <div className="flex items-center gap-2 mb-2">
                <Crosshair className="text-red-400" size={20} />
                <span className="font-semibold">Ataques Totales</span>
              </div>
              <div className="text-2xl font-bold text-red-400">
                {verificationMetrics.totalAttacks}
              </div>
            </div>

            <div className="bg-black/40 rounded-lg p-4">
              <div className="flex items-center gap-2 mb-2">
                <Skull className="text-green-400" size={20} />
                <span className="font-semibold">Eliminaciones</span>
              </div>
              <div className="text-2xl font-bold text-green-400">
                {verificationMetrics.confirmedKills}
              </div>
            </div>

            <div className="bg-black/40 rounded-lg p-4">
              <div className="flex items-center gap-2 mb-2">
                <TrendingDown className="text-orange-400" size={20} />
                <span className="font-semibold">Disrupciones</span>
              </div>
              <div className="text-2xl font-bold text-orange-400">
                {verificationMetrics.partialDisruptions}
              </div>
            </div>

            <div className="bg-black/40 rounded-lg p-4">
              <div className="flex items-center gap-2 mb-2">
                <RefreshCw className="text-purple-400" size={20} />
                <span className="font-semibold">Resurrecciones</span>
              </div>
              <div className="text-2xl font-bold text-purple-400">
                {verificationMetrics.resurrections}
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto p-6 space-y-6">
        {/* Panel de monitoreo en tiempo real */}
        <div className="bg-black/30 backdrop-blur-sm rounded-xl p-6 border border-blue-500/30">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-bold text-blue-300 flex items-center gap-2">
              <Radar className="animate-spin" />
              Monitoreo en Tiempo Real
            </h2>
            
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-2">
                <label className="text-sm">Ventana de seguimiento:</label>
                <select
                  value={timeWindow}
                  onChange={(e) => setTimeWindow(parseInt(e.target.value))}
                  className="bg-gray-700 text-white rounded px-2 py-1"
                >
                  <option value={6}>6 horas</option>
                  <option value={12}>12 horas</option>
                  <option value={24}>24 horas</option>
                  <option value={48}>48 horas</option>
                  <option value={72}>72 horas</option>
                </select>
              </div>
              
              <button
                onClick={() => setMonitoringStatus(monitoringStatus === 'active' ? 'paused' : 'active')}
                className={`px-4 py-2 rounded font-semibold transition-colors ${
                  monitoringStatus === 'active' 
                    ? 'bg-red-600 hover:bg-red-700' 
                    : 'bg-green-600 hover:bg-green-700'
                }`}
              >
                {monitoringStatus === 'active' ? 'Pausar' : 'Reanudar'}
              </button>
            </div>
          </div>

          {/* Estado actual */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
            <div className="bg-red-900/30 rounded-lg p-3 text-center">
              <div className="text-lg font-bold text-red-400">{realTimeMonitoring.activeTargets}</div>
              <div className="text-sm text-gray-300">Activos</div>
            </div>
            <div className="bg-green-900/30 rounded-lg p-3 text-center">
              <div className="text-lg font-bold text-green-400">{realTimeMonitoring.deadTargets}</div>
              <div className="text-sm text-gray-300">Eliminados</div>
            </div>
            <div className="bg-orange-900/30 rounded-lg p-3 text-center">
              <div className="text-lg font-bold text-orange-400">{realTimeMonitoring.zombieTargets}</div>
              <div className="text-sm text-gray-300">Zombies</div>
            </div>
            <div className="bg-blue-900/30 rounded-lg p-3 text-center">
              <div className="text-lg font-bold text-blue-400">{realTimeMonitoring.awaitingConfirmation}</div>
              <div className="text-sm text-gray-300">Monitoreando</div>
            </div>
          </div>
        </div>

        {/* Targets bajo seguimiento */}
        <div className="bg-black/30 backdrop-blur-sm rounded-xl p-6 border border-purple-500/30">
          <h2 className="text-xl font-bold text-purple-300 mb-4 flex items-center gap-2">
            <Eye />
            Targets Bajo Seguimiento Post-Ataque
          </h2>
          
          <div className="space-y-4">
            {trackedTargets.map(target => {
              const hoursSinceAttack = (Date.now() - target.attackTime.getTime()) / (1000 * 60 * 60);
              const hoursSinceActivity = target.lastActivity ? 
                (Date.now() - target.lastActivity.getTime()) / (1000 * 60 * 60) : 999;
              
              return (
                <div key={target.id} className="bg-gray-800/50 rounded-lg p-4 border border-gray-600">
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center gap-3">
                      <div className={getStatusColor(target.status)}>
                        {getStatusIcon(target.status)}
                      </div>
                      <div>
                        <div className="font-semibold text-white">{target.id}</div>
                        <div className="text-sm text-gray-400 capitalize">
                          {target.platform} • {target.attackType.replace('_', ' ')}
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex items-center gap-2">
                      <span className={`px-2 py-1 rounded text-xs font-semibold ${getStatusColor(target.status)}`}>
                        {target.status.replace('_', ' ').toUpperCase()}
                      </span>
                      <button
                        onClick={() => performDeepVerification(target.id)}
                        className="px-3 py-1 bg-green-600 hover:bg-green-700 rounded text-sm font-semibold"
                      >
                        Verificar
                      </button>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                    <div>
                      <div className="text-gray-400">Tiempo desde ataque:</div>
                      <div className="text-white">{hoursSinceAttack.toFixed(1)}h</div>
                    </div>
                    <div>
                      <div className="text-gray-400">Última actividad:</div>
                      <div className="text-white">
                        {hoursSinceActivity < 999 ? `${hoursSinceActivity.toFixed(1)}h` : 'Ninguna'}
                      </div>
                    </div>
                    <div>
                      <div className="text-gray-400">Rendimiento pre-ataque:</div>
                      <div className="text-white">{target.preAttackMetrics.ordersPerHour} pedidos/h</div>
                    </div>
                    <div>
                      <div className="text-gray-400">Rendimiento actual:</div>
                      <div className="text-white">
                        {target.postAttackMetrics ? 
                          `${target.postAttackMetrics.ordersPerHour} pedidos/h` : 
                          'Sin datos'
                        }
                      </div>
                    </div>
                  </div>

                  {target.postAttackMetrics && (
                    <div className="mt-3 pt-3 border-t border-gray-600">
                      <div className="text-sm text-gray-400 mb-2">Métricas Post-Ataque:</div>
                      <div className="grid grid-cols-3 gap-4 text-xs">
                        <div>
                          <span className="text-gray-400">Tiempo respuesta:</span>
                          <span className="ml-2 text-orange-400">
                            {target.postAttackMetrics.avgResponseTime.toFixed(0)}ms
                          </span>
                        </div>
                        <div>
                          <span className="text-gray-400">Tasa de éxito:</span>
                          <span className="ml-2 text-yellow-400">
                            {target.postAttackMetrics.successRate}%
                          </span>
                        </div>
                        <div>
                          <span className="text-gray-400">Tasa de error:</span>
                          <span className="ml-2 text-red-400">
                            {target.postAttackMetrics.errorRate.toFixed(1)}%
                          </span>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </div>

        {/* Reportes de verificación */}
        <div className="bg-black/30 backdrop-blur-sm rounded-xl p-6 border border-green-500/30">
          <h2 className="text-xl font-bold text-green-300 mb-4 flex items-center gap-2">
            <CheckCircle2 />
            Reportes de Verificación Recientes
          </h2>
          
          {verificationResults.length === 0 ? (
            <div className="text-center py-8 text-gray-400">
              <Database size={48} className="mx-auto mb-4" />
              <p>No hay reportes de verificación aún</p>
              <p className="text-sm">Haz click en "Verificar" en cualquier target para generar un reporte</p>
            </div>
          ) : (
            <div className="space-y-3">
              {verificationResults.map(report => (
                <div key={report.id} className="bg-gray-800/50 rounded-lg p-4 border border-gray-600">
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center gap-3">
                      <div className="font-semibold text-white">{report.targetId}</div>
                      <div className={`font-bold ${getVerdictColor(report.verdict)}`}>
                        {report.verdict}
                      </div>
                    </div>
                    <div className="text-sm text-gray-400">
                      Confianza: {report.confidence}%
                    </div>
                  </div>
                  
                  <div className="text-sm text-gray-300 mb-2">
                    {report.recommendation}
                  </div>
                  
                  <div className="grid grid-cols-3 gap-4 text-xs text-gray-400">
                    <div>Tiempo desde ataque: {report.metrics.hoursSinceAttack}h</div>
                    <div>Última actividad: {report.metrics.hoursSinceLastActivity}h</div>
                    <div>Caída rendimiento: {report.metrics.performanceDropoff}</div>
                  </div>
                  
                  <div className="text-xs text-gray-500 mt-2">
                    {report.timestamp.toLocaleString()}
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Análisis y recomendaciones */}
        <div className="bg-black/20 backdrop-blur-sm rounded-xl p-6 border border-gray-500/30">
          <h2 className="text-xl font-bold text-gray-300 mb-4 flex items-center gap-2">
            <BarChart3 />
            Análisis de Efectividad y Recomendaciones
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
              <h3 className="font-semibold text-blue-300 mb-2">Estadísticas Globales</h3>
              <div className="space-y-1 text-sm">
                <div>Tasa de eliminación: {verificationMetrics.killRate.toFixed(1)}%</div>
                <div>Disrupciones parciales: {verificationMetrics.partialDisruptions}</div>
                <div>Resurrecciones detectadas: {verificationMetrics.resurrections}</div>
                <div>Tiempo promedio de muerte: {timeWindow/2}h</div>
              </div>
            </div>
            
            <div>
              <h3 className="font-semibold text-orange-300 mb-2">Patrones Detectados</h3>
              <div className="space-y-1 text-sm text-gray-400">
                <div>• Decoherencia cuántica: 95% efectividad</div>
                <div>• Venenos graduales: 70% efectividad</div>
                <div>• Modo sueño: 85% efectividad temporal</div>
                <div>• Interferencia: 45% efectividad</div>
              </div>
            </div>
            
            <div>
              <h3 className="font-semibold text-green-300 mb-2">Recomendaciones</h3>
              <div className="space-y-1 text-sm text-gray-400">
                <div>• Usar ataques letales para confirmación rápida</div>
                <div>• Monitorear targets por 24-48h mínimo</div>
                <div>• Combinar múltiples ataques para resistentes</div>
                <div>• Implementar alerta de resurrección</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default KillVerificationSystem;
