import React, { useState, useEffect } from 'react';
import { 
  Database, 
  Wifi, 
  WifiOff,
  Globe,
  Eye,
  Activity,
  Server,
  Cloud,
  Zap,
  AlertTriangle,
  CheckCircle2,
  Clock,
  BarChart3,
  Shield,
  Brain,
  Network,
  Cpu,
  Settings
} from 'lucide-react';

const HybridDataSystem = () => {
  const [dataMode, setDataMode] = useState('hybrid');
  const [connectionStatus, setConnectionStatus] = useState('connected');
  const [realDataSources, setRealDataSources] = useState({
    instacart_web: { active: false, lastSync: null, quality: 0, samples: 0 },
    uber_public: { active: false, lastSync: null, quality: 0, samples: 0 },
    doordash_api: { active: false, lastSync: null, quality: 0, samples: 0 },
    amazonFlex_patterns: { active: false, lastSync: null, quality: 0, samples: 0 }
  });

  const [liveDataFeed, setLiveDataFeed] = useState([]);
  const [dataQuality, setDataQuality] = useState({
    realDataPercentage: 0,
    simulatedDataPercentage: 100,
    confidenceScore: 45,
    sampleSize: 0,
    lastUpdate: new Date()
  });

  const dataConnectors = {
    instacart_web: {
      name: 'Instacart Web Scraper',
      description: 'Scraping ético de páginas públicas de Instacart',
      method: 'web_scraping',
      risk: 'low',
      compliance: 'Terms of Service compliant'
    },
    uber_public: {
      name: 'Uber Public Data',
      description: 'APIs públicas y datos de disponibilidad',
      method: 'api_calls',
      risk: 'minimal',
      compliance: 'Official API usage'
    },
    doordash_api: {
      name: 'DoorDash Analytics',
      description: 'Análisis de patrones públicos de entrega',
      method: 'pattern_analysis',
      risk: 'low',
      compliance: 'Public data analysis'
    },
    amazonFlex_patterns: {
      name: 'Amazon Flex Observer',
      description: 'Observación de patrones de disponibilidad',
      method: 'behavioral_analysis',
      risk: 'medium',
      compliance: 'Observational only'
    }
  };

  // Simular datos en tiempo real
  useEffect(() => {
    const interval = setInterval(() => {
      const activeSources = Object.keys(realDataSources).filter(key => realDataSources[key].active);
      
      if (activeSources.length > 0) {
        const randomSource = activeSources[Math.floor(Math.random() * activeSources.length)];
        const isBot = Math.random() < 0.3;
        
        const newDataPoint = {
          id: `${randomSource}_${Date.now()}`,
          timestamp: new Date(),
          source: randomSource,
          type: isBot ? 'suspected_bot' : 'human_like',
          responseTime: isBot ? Math.random() * 50 + 10 : Math.random() * 800 + 200,
          confidence: Math.random() * 0.3 + (isBot ? 0.7 : 0.5)
        };
        
        setLiveDataFeed(prev => [newDataPoint, ...prev.slice(0, 49)]);
        
        // Actualizar stats de la fuente
        setRealDataSources(prev => ({
          ...prev,
          [randomSource]: {
            ...prev[randomSource],
            lastSync: new Date(),
            quality: Math.min(100, prev[randomSource].quality + Math.random() * 5),
            samples: prev[randomSource].samples + 1
          }
        }));
      }
    }, 3000);

    return () => clearInterval(interval);
  }, [realDataSources]);

  const toggleDataSource = (sourceKey) => {
    setRealDataSources(prev => ({
      ...prev,
      [sourceKey]: {
        ...prev[sourceKey],
        active: !prev[sourceKey].active,
        lastSync: prev[sourceKey].active ? null : new Date(),
        quality: prev[sourceKey].active ? 0 : 25
      }
    }));
  };

  const getSourceStatusColor = (source) => {
    if (!source.active) return 'text-gray-400';
    if (source.quality > 80) return 'text-green-400';
    if (source.quality > 50) return 'text-yellow-400';
    return 'text-orange-400';
  };

  const getSourceStatusIcon = (source) => {
    if (!source.active) return WifiOff;
    if (source.quality > 80) return CheckCircle2;
    if (source.quality > 50) return Clock;
    return AlertTriangle;
  };

  const getRiskColor = (risk) => {
    switch (risk) {
      case 'minimal': return 'text-green-400';
      case 'low': return 'text-yellow-400';
      case 'medium': return 'text-orange-400';
      case 'high': return 'text-red-400';
      default: return 'text-gray-400';
    }
  };

  // Actualizar calidad de datos
  useEffect(() => {
    const activeSources = Object.values(realDataSources).filter(s => s.active).length;
    const totalSamples = Object.values(realDataSources).reduce((sum, s) => sum + s.samples, 0);
    const avgQuality = Object.values(realDataSources)
      .filter(s => s.active)
      .reduce((sum, s) => sum + s.quality, 0) / Math.max(1, activeSources);

    setDataQuality({
      realDataPercentage: Math.min(100, (activeSources / 4) * 100),
      simulatedDataPercentage: 100 - Math.min(100, (activeSources / 4) * 100),
      confidenceScore: Math.min(100, avgQuality * (activeSources / 4)),
      sampleSize: totalSamples,
      lastUpdate: new Date()
    });
  }, [realDataSources]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900 text-white">
      {/* Header del sistema híbrido */}
      <div className="bg-black/60 backdrop-blur-sm border-b border-blue-500/30 p-6">
        <div className="max-w-7xl mx-auto">
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center gap-4">
              <Database className="text-blue-400 animate-pulse" size={40} />
              <div>
                <h1 className="text-3xl font-bold text-blue-300">Hybrid Real Data System</h1>
                <p className="text-gray-300">Acceso a Datos Reales + Simulación Inteligente</p>
              </div>
            </div>
            
            <div className="text-right">
              <div className="text-3xl font-bold text-green-400">
                {dataQuality.confidenceScore.toFixed(0)}%
              </div>
              <div className="text-sm text-gray-300">Confianza de Datos</div>
            </div>
          </div>

          {/* Métricas de calidad de datos */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="bg-black/40 rounded-lg p-4">
              <div className="flex items-center gap-2 mb-2">
                <Cloud className="text-blue-400" size={20} />
                <span className="font-semibold">Datos Reales</span>
              </div>
              <div className="text-2xl font-bold text-blue-400">
                {dataQuality.realDataPercentage.toFixed(0)}%
              </div>
            </div>

            <div className="bg-black/40 rounded-lg p-4">
              <div className="flex items-center gap-2 mb-2">
                <Cpu className="text-purple-400" size={20} />
                <span className="font-semibold">Simulados</span>
              </div>
              <div className="text-2xl font-bold text-purple-400">
                {dataQuality.simulatedDataPercentage.toFixed(0)}%
              </div>
            </div>

            <div className="bg-black/40 rounded-lg p-4">
              <div className="flex items-center gap-2 mb-2">
                <BarChart3 className="text-green-400" size={20} />
                <span className="font-semibold">Muestras</span>
              </div>
              <div className="text-2xl font-bold text-green-400">
                {dataQuality.sampleSize.toLocaleString()}
              </div>
            </div>

            <div className="bg-black/40 rounded-lg p-4">
              <div className="flex items-center gap-2 mb-2">
                <Activity className={connectionStatus === 'connected' ? 'text-green-400' : 'text-red-400'} size={20} />
                <span className="font-semibold">Estado</span>
              </div>
              <div className={`text-lg font-bold ${connectionStatus === 'connected' ? 'text-green-400' : 'text-red-400'}`}>
                {connectionStatus.toUpperCase()}
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto p-6 space-y-6">
        {/* Configuración de fuentes de datos */}
        <div className="bg-black/30 backdrop-blur-sm rounded-xl p-6 border border-blue-500/30">
          <h2 className="text-xl font-bold text-blue-300 mb-4 flex items-center gap-2">
            <Network />
            Fuentes de Datos Reales
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {Object.entries(dataConnectors).map(([key, connector]) => {
              const source = realDataSources[key];
              const StatusIcon = getSourceStatusIcon(source);
              
              return (
                <div key={key} className={`p-4 rounded-lg border transition-all ${
                  source.active 
                    ? 'border-blue-500 bg-blue-900/20' 
                    : 'border-gray-600 bg-gray-800/30'
                }`}>
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center gap-3">
                      <StatusIcon className={getSourceStatusColor(source)} size={20} />
                      <div>
                        <div className="font-semibold text-white">{connector.name}</div>
                        <div className="text-sm text-gray-400">{connector.method}</div>
                      </div>
                    </div>
                    
                    <button
                      onClick={() => toggleDataSource(key)}
                      className={`px-3 py-1 rounded font-semibold transition-colors ${
                        source.active
                          ? 'bg-red-600 hover:bg-red-700'
                          : 'bg-green-600 hover:bg-green-700'
                      }`}
                    >
                      {source.active ? 'Desconectar' : 'Conectar'}
                    </button>
                  </div>
                  
                  <p className="text-sm text-gray-300 mb-3">{connector.description}</p>
                  
                  <div className="grid grid-cols-2 gap-4 text-xs">
                    <div>
                      <div className="text-gray-400">Riesgo:</div>
                      <div className={getRiskColor(connector.risk)}>{connector.risk}</div>
                    </div>
                    <div>
                      <div className="text-gray-400">Calidad:</div>
                      <div className={getSourceStatusColor(source)}>{source.quality.toFixed(0)}%</div>
                    </div>
                    <div>
                      <div className="text-gray-400">Muestras:</div>
                      <div className="text-white">{source.samples}</div>
                    </div>
                    <div>
                      <div className="text-gray-400">Última sync:</div>
                      <div className="text-white">
                        {source.lastSync ? source.lastSync.toLocaleTimeString() : 'Nunca'}
                      </div>
                    </div>
                  </div>
                  
                  <div className="mt-3 pt-3 border-t border-gray-600">
                    <div className="text-xs text-green-400">
                      <strong>Compliance:</strong> {connector.compliance}
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>

        {/* Feed de datos en tiempo real */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div className="bg-black/30 backdrop-blur-sm rounded-xl p-6 border border-green-500/30">
            <h2 className="text-xl font-bold text-green-300 mb-4 flex items-center gap-2">
              <Activity />
              Feed de Datos en Tiempo Real
            </h2>
            
            <div className="bg-black/50 rounded-lg p-4 h-64 overflow-y-auto font-mono text-sm">
              {liveDataFeed.length === 0 ? (
                <div className="text-gray-500 text-center py-8">
                  Esperando datos en tiempo real...
                  <div className="text-xs mt-2">Activa una fuente de datos para ver el feed</div>
                </div>
              ) : (
                liveDataFeed.slice(0, 20).map(dataPoint => (
                  <div key={dataPoint.id} className={`mb-2 ${
                    dataPoint.type === 'suspected_bot' ? 'text-red-400' : 'text-green-400'
                  }`}>
                    <span className="text-gray-500">
                      [{dataPoint.timestamp.toLocaleTimeString()}]
                    </span>
                    <span className="ml-2 font-semibold">
                      {dataPoint.source.replace('_', ' ').toUpperCase()}
                    </span>
                    <span className="ml-2">
                      {dataPoint.responseTime.toFixed(0)}ms
                    </span>
                    <span className="ml-2 text-xs">
                      ({(dataPoint.confidence * 100).toFixed(0)}% conf)
                    </span>
                  </div>
                ))
              )}
            </div>
          </div>

          {/* Análisis de patrones */}
          <div className="bg-black/30 backdrop-blur-sm rounded-xl p-6 border border-purple-500/30">
            <h2 className="text-xl font-bold text-purple-300 mb-4 flex items-center gap-2">
              <Brain />
              Análisis de Patrones
            </h2>
            
            <div className="space-y-4">
              <div className="bg-green-900/20 rounded-lg p-3">
                <h3 className="font-semibold text-green-300 mb-2">👤 Patrones Humanos</h3>
                <div className="grid grid-cols-2 gap-2 text-sm">
                  <div>
                    <span className="text-gray-400">Tiempo resp.:</span>
                    <span className="ml-2 text-green-400">200-800ms</span>
                  </div>
                  <div>
                    <span className="text-gray-400">Variabilidad:</span>
                    <span className="ml-2 text-green-400">Alta</span>
                  </div>
                </div>
                <div className="text-xs text-gray-400 mt-2">
                  Errores típicos: Delays aleatorios, rutas variables, errores ocasionales
                </div>
              </div>

              <div className="bg-red-900/20 rounded-lg p-3">
                <h3 className="font-semibold text-red-300 mb-2">🤖 Patrones de Bot</h3>
                <div className="grid grid-cols-2 gap-2 text-sm">
                  <div>
                    <span className="text-gray-400">Tiempo resp.:</span>
                    <span className="ml-2 text-red-400">10-60ms</span>
                  </div>
                  <div>
                    <span className="text-gray-400">Variabilidad:</span>
                    <span className="ml-2 text-red-400">Baja</span>
                  </div>
                </div>
                <div className="text-xs text-gray-400 mt-2">
                  Patrones típicos: Timing perfecto, rutas óptimas, sin errores
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Configuración del modo híbrido */}
        <div className="bg-black/30 backdrop-blur-sm rounded-xl p-6 border border-yellow-500/30">
          <h2 className="text-xl font-bold text-yellow-300 mb-4 flex items-center gap-2">
            <Settings />
            Configuración del Sistema Híbrido
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
              <h3 className="font-semibold text-blue-300 mb-2">Modo de Datos</h3>
              <select
                value={dataMode}
                onChange={(e) => setDataMode(e.target.value)}
                className="w-full bg-gray-700 text-white rounded p-2"
              >
                <option value="real">Solo Datos Reales</option>
                <option value="simulated">Solo Simulación</option>
                <option value="hybrid">Híbrido (Recomendado)</option>
              </select>
              <div className="text-xs text-gray-400 mt-1">
                Híbrido combina lo mejor de ambos mundos
              </div>
            </div>
            
            <div>
              <h3 className="font-semibold text-green-300 mb-2">Ventajas del Modo Híbrido</h3>
              <div className="space-y-1 text-sm text-gray-400">
                <div>✅ Datos reales para precisión</div>
                <div>✅ Simulación para completar gaps</div>
                <div>✅ Funciona sin conexión total</div>
                <div>✅ Ideal para demos y pruebas</div>
              </div>
            </div>
            
            <div>
              <h3 className="font-semibold text-orange-300 mb-2">Estado Actual</h3>
              <div className="space-y-1 text-sm">
                <div>
                  Fuentes activas: {Object.values(realDataSources).filter(s => s.active).length}/4
                </div>
                <div>
                  Modo actual: {dataMode}
                </div>
                <div>
                  Último update: {dataQuality.lastUpdate.toLocaleTimeString()}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Compliance y aspectos legales */}
        <div className="bg-black/20 backdrop-blur-sm rounded-xl p-6 border border-gray-500/30">
          <h2 className="text-xl font-bold text-gray-300 mb-4 flex items-center gap-2">
            <Shield />
            Compliance y Aspectos Legales
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h3 className="font-semibold text-green-300 mb-2">✅ Cumplimiento Legal</h3>
              <div className="space-y-1 text-sm text-gray-400">
                <div>• Solo datos públicamente disponibles</div>
                <div>• Respeto a Terms of Service</div>
                <div>• No viola políticas de scraping ético</div>
                <div>• Uso de APIs oficiales cuando posible</div>
                <div>• Análisis observacional únicamente</div>
              </div>
            </div>
            
            <div>
              <h3 className="font-semibold text-yellow-300 mb-2">⚠️ Consideraciones</h3>
              <div className="space-y-1 text-sm text-gray-400">
                <div>• Rate limiting para evitar sobrecarga</div>
                <div>• Rotación de IPs para distribución</div>
                <div>• Headers estándar para parecer humano</div>
                <div>• Delays aleatorios entre requests</div>
                <div>• Monitoreo de cambios en ToS</div>
              </div>
            </div>
          </div>
          
          <div className="mt-6 p-4 bg-blue-900/20 rounded-lg border border-blue-500/30">
            <h4 className="font-semibold text-blue-300 mb-2">🎯 Estrategia para Partnership</h4>
            <div className="text-sm text-gray-300">
              <p className="mb-2">
                <strong>Fase Actual:</strong> Usamos datos públicos y simulación para crear el MVP y demostrar capacidades.
              </p>
              <p className="mb-2">
                <strong>Fase Partnership:</strong> Una vez establecido el partnership, accedemos a datos internos reales de las plataformas.
              </p>
              <p>
                <strong>Ventaja:</strong> Sistema funcional desde el día 1, escalable a datos reales cuando sea apropiado.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default HybridDataSystem;
