import React, { useState, useEffect, useRef } from 'react';
import { 
  Shield, 
  Eye, 
  EyeOff,
  Radar,
  Lock,
  Unlock,
  Globe,
  Shuffle,
  Zap,
  AlertTriangle,
  CheckCircle2,
  Activity,
  Timer,
  Cpu,
  Network,
  Key,
  Fingerprint,
  User,
  Ghost,
  UserX,
  Radio,
  Wifi,
  Server,
  Database
} from 'lucide-react';

const StealthSecuritySystem = () => {
  const [stealthMode, setStealthMode] = useState('passive'); // passive, active, ghost, phantom
  const [securityLevel, setSecurityLevel] = useState(0);
  const [activeProtections, setActiveProtections] = useState({
    vpnRotation: false,
    proxyChain: false,
    trafficObfuscation: false,
    behaviorMimicking: false,
    signatureRandomization: false,
    antiFingerprinting: false,
    encryptedComms: false,
    decoyTraffic: false
  });

  const [threatLevel, setThreatLevel] = useState('low');
  const [detectionRisk, setDetectionRisk] = useState(5);
  const [evasionStats, setEvasionStats] = useState({
    successfulAttacks: 0,
    blockedAttempts: 0,
    detectionsAvoided: 0,
    compromisedEndpoints: 0
  });

  const [networkStatus, setNetworkStatus] = useState({
    vpnNodes: 0,
    proxyChain: 0,
    encryptionLevel: 0,
    anonymityScore: 0
  });

  // Configuraciones de seguridad por nivel
  const securityConfigs = {
    0: { name: 'Sin Protecci√≥n', color: 'red', risk: 95 },
    1: { name: 'B√°sica', color: 'orange', risk: 75 },
    2: { name: 'Intermedia', color: 'yellow', risk: 50 },
    3: { name: 'Avanzada', color: 'blue', risk: 25 },
    4: { name: 'Militar', color: 'purple', risk: 10 },
    5: { name: 'Fantasma', color: 'green', risk: 2 }
  };

  // Tipos de ataques y sus contramedidas
  const stealthTechniques = {
    vpnRotation: {
      name: 'Rotaci√≥n VPN',
      description: 'Cambia IP cada X minutos usando m√∫ltiples VPNs',
      effectivenessVs: ['IP Blocking', 'Geolocation Tracking'],
      energyCost: 20,
      icon: Globe,
      color: 'blue'
    },
    proxyChain: {
      name: 'Cadena de Proxies',
      description: 'Ruta tr√°fico a trav√©s de m√∫ltiples proxies anidados',
      effectivenessVs: ['Traffic Analysis', 'Source Tracing'],
      energyCost: 30,
      icon: Network,
      color: 'purple'
    },
    trafficObfuscation: {
      name: 'Ofuscaci√≥n de Tr√°fico',
      description: 'Oculta patrones de tr√°fico mimiendo navegaci√≥n normal',
      effectivenessVs: ['DPI Analysis', 'Pattern Recognition'],
      energyCost: 25,
      icon: Shuffle,
      color: 'green'
    },
    behaviorMimicking: {
      name: 'Imitaci√≥n Humana',
      description: 'Simula comportamiento humano con delays y errores',
      effectivenessVs: ['Behavioral Analysis', 'Bot Detection'],
      energyCost: 15,
      icon: UserX,
      color: 'yellow'
    },
    signatureRandomization: {
      name: 'Firmas Aleatorias',
      description: 'Randomiza User-Agent, headers, y fingerprints',
      effectivenessVs: ['Signature Detection', 'Fingerprinting'],
      energyCost: 10,
      icon: Fingerprint,
      color: 'orange'
    },
    antiFingerprinting: {
      name: 'Anti-Fingerprinting',
      description: 'Bloquea t√©cnicas de identificaci√≥n del dispositivo',
      effectivenessVs: ['Device Fingerprinting', 'Canvas Detection'],
      energyCost: 20,
      icon: User,
      color: 'indigo'
    },
    encryptedComms: {
      name: 'Comunicaciones Encriptadas',
      description: 'Encripta toda comunicaci√≥n con algoritmos cu√°nticos',
      effectivenessVs: ['Traffic Interception', 'Man-in-Middle'],
      energyCost: 35,
      icon: Lock,
      color: 'red'
    },
    decoyTraffic: {
      name: 'Tr√°fico Se√±uelo',
      description: 'Genera tr√°fico falso para confundir an√°lisis',
      effectivenessVs: ['Traffic Volume Analysis', 'Timing Attacks'],
      energyCost: 40,
      icon: Ghost,
      color: 'gray'
    }
  };

  // Simular actividad del sistema de seguridad
  useEffect(() => {
    if (securityLevel > 0) {
      const securityInterval = setInterval(() => {
        // Simular detecci√≥n de amenazas
        if (Math.random() < 0.2) {
          const threats = ['IP Scan', 'DPI Analysis', 'Behavioral Profiling', 'Signature Match'];
          const threat = threats[Math.floor(Math.random() * threats.length)];
          
          // Calcular si evadimos la detecci√≥n
          const evasionChance = (securityLevel * 20) / 100;
          if (Math.random() < evasionChance) {
            setEvasionStats(prev => ({
              ...prev,
              detectionsAvoided: prev.detectionsAvoided + 1
            }));
            logSecurityEvent(`üõ°Ô∏è Amenaza evadida: ${threat}`, 'success');
          } else {
            setEvasionStats(prev => ({
              ...prev,
              blockedAttempts: prev.blockedAttempts + 1
            }));
            logSecurityEvent(`‚ö†Ô∏è Amenaza detectada: ${threat}`, 'warning');
          }
        }

        // Actualizar estado de red
        setNetworkStatus(prev => ({
          vpnNodes: activeProtections.vpnRotation ? Math.floor(Math.random() * 5) + 3 : 0,
          proxyChain: activeProtections.proxyChain ? Math.floor(Math.random() * 3) + 2 : 0,
          encryptionLevel: activeProtections.encryptedComms ? 256 : 0,
          anonymityScore: calculateAnonymityScore()
        }));

        // Actualizar nivel de riesgo
        const newRisk = securityConfigs[securityLevel].risk + (Math.random() * 10 - 5);
        setDetectionRisk(Math.max(0, Math.min(100, newRisk)));
      }, 3000);

      return () => clearInterval(securityInterval);
    }
  }, [securityLevel, activeProtections]);

  const [securityLog, setSecurityLog] = useState([]);

  const logSecurityEvent = (message, type = 'info') => {
    const logEntry = {
      id: Date.now(),
      timestamp: new Date(),
      message,
      type
    };
    setSecurityLog(prev => [logEntry, ...prev.slice(0, 19)]); // √öltimos 20
  };

  const calculateAnonymityScore = () => {
    const protectionCount = Object.values(activeProtections).filter(Boolean).length;
    return Math.min(100, (protectionCount / 8) * 100);
  };

  const toggleProtection = (protectionKey) => {
    setActiveProtections(prev => {
      const newState = { ...prev, [protectionKey]: !prev[protectionKey] };
      
      // Actualizar nivel de seguridad basado en protecciones activas
      const activeCount = Object.values(newState).filter(Boolean).length;
      const newSecurityLevel = Math.min(5, activeCount);
      setSecurityLevel(newSecurityLevel);
      
      const action = newState[protectionKey] ? 'activada' : 'desactivada';
      logSecurityEvent(`${stealthTechniques[protectionKey].name} ${action}`, 
        newState[protectionKey] ? 'success' : 'info');
      
      return newState;
    });
  };

  const activateStealthMode = (mode) => {
    setStealthMode(mode);
    
    // Configuraciones predefinidas por modo
    const modeConfigs = {
      passive: { 
        protections: ['behaviorMimicking', 'signatureRandomization'],
        message: 'üïµÔ∏è Modo Pasivo activado - Bajo perfil'
      },
      active: { 
        protections: ['vpnRotation', 'proxyChain', 'trafficObfuscation', 'behaviorMimicking'],
        message: '‚ö° Modo Activo activado - Protecci√≥n completa'
      },
      ghost: { 
        protections: ['vpnRotation', 'proxyChain', 'trafficObfuscation', 'antiFingerprinting', 'encryptedComms'],
        message: 'üëª Modo Fantasma activado - Invisibilidad m√°xima'
      },
      phantom: { 
        protections: Object.keys(stealthTechniques),
        message: 'üå´Ô∏è Modo Phantom activado - Protecci√≥n total'
      }
    };

    const config = modeConfigs[mode];
    if (config) {
      const newProtections = {};
      Object.keys(stealthTechniques).forEach(key => {
        newProtections[key] = config.protections.includes(key);
      });
      
      setActiveProtections(newProtections);
      setSecurityLevel(Math.min(5, config.protections.length));
      logSecurityEvent(config.message, 'success');
    }
  };

  const performSecurityAudit = () => {
    logSecurityEvent('üîç Iniciando auditor√≠a de seguridad...', 'info');
    
    setTimeout(() => {
      const vulnerabilities = [];
      if (!activeProtections.vpnRotation) vulnerabilities.push('IP expuesta');
      if (!activeProtections.encryptedComms) vulnerabilities.push('Comunicaciones sin encriptar');
      if (!activeProtections.antiFingerprinting) vulnerabilities.push('Fingerprinting vulnerable');
      
      if (vulnerabilities.length === 0) {
        logSecurityEvent('‚úÖ Auditor√≠a completada - No se encontraron vulnerabilidades', 'success');
      } else {
        logSecurityEvent(`‚ö†Ô∏è Vulnerabilidades encontradas: ${vulnerabilities.join(', ')}`, 'warning');
      }
    }, 2000);
  };

  const currentConfig = securityConfigs[securityLevel];

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-slate-900 to-black text-white">
      {/* Header del sistema de seguridad */}
      <div className="bg-black/60 backdrop-blur-sm border-b border-blue-500/30 p-6">
        <div className="max-w-7xl mx-auto">
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center gap-4">
              <Shield className={`${securityLevel > 2 ? 'text-green-400 animate-pulse' : 'text-yellow-400'}`} size={40} />
              <div>
                <h1 className="text-3xl font-bold text-blue-300">Quantum Stealth Security</h1>
                <p className="text-gray-300">Sistema Anti-Detecci√≥n y Evasi√≥n Avanzada</p>
              </div>
            </div>
            
            <div className="text-right">
              <div className={`text-3xl font-bold text-${currentConfig.color}-400`}>
                Nivel {securityLevel}
              </div>
              <div className="text-sm text-gray-300">{currentConfig.name}</div>
            </div>
          </div>

          {/* Indicadores de estado */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="bg-black/40 rounded-lg p-4">
              <div className="flex items-center gap-2 mb-2">
                <Eye className={detectionRisk < 20 ? 'text-green-400' : 'text-red-400'} size={20} />
                <span className="font-semibold">Riesgo Detecci√≥n</span>
              </div>
              <div className={`text-2xl font-bold ${detectionRisk < 20 ? 'text-green-400' : 'text-red-400'}`}>
                {detectionRisk.toFixed(0)}%
              </div>
            </div>

            <div className="bg-black/40 rounded-lg p-4">
              <div className="flex items-center gap-2 mb-2">
                <User className="text-purple-400" size={20} />
                <span className="font-semibold">Anonimato</span>
              </div>
              <div className="text-2xl font-bold text-purple-400">
                {networkStatus.anonymityScore.toFixed(0)}%
              </div>
            </div>

            <div className="bg-black/40 rounded-lg p-4">
              <div className="flex items-center gap-2 mb-2">
                <CheckCircle2 className="text-green-400" size={20} />
                <span className="font-semibold">Evasiones</span>
              </div>
              <div className="text-2xl font-bold text-green-400">
                {evasionStats.detectionsAvoided}
              </div>
            </div>

            <div className="bg-black/40 rounded-lg p-4">
              <div className="flex items-center gap-2 mb-2">
                <Network className="text-blue-400" size={20} />
                <span className="font-semibold">Nodos VPN</span>
              </div>
              <div className="text-2xl font-bold text-blue-400">
                {networkStatus.vpnNodes}
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto p-6 space-y-6">
        {/* Modos de sigilo predefinidos */}
        <div className="bg-black/30 backdrop-blur-sm rounded-xl p-6 border border-gray-500/30">
          <h2 className="text-xl font-bold text-white mb-4 flex items-center gap-2">
            <Ghost />
            Modos de Sigilo Predefinidos
          </h2>
          
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {[
              { key: 'passive', name: 'Pasivo', desc: 'Bajo perfil', icon: EyeOff, color: 'gray' },
              { key: 'active', name: 'Activo', desc: 'Protecci√≥n completa', icon: Shield, color: 'blue' },
              { key: 'ghost', name: 'Fantasma', desc: 'Invisibilidad m√°xima', icon: Ghost, color: 'purple' },
              { key: 'phantom', name: 'Phantom', desc: 'Protecci√≥n total', icon: User, color: 'green' }
            ].map(mode => {
              const IconComponent = mode.icon;
              return (
                <button
                  key={mode.key}
                  onClick={() => activateStealthMode(mode.key)}
                  className={`p-4 rounded-lg border transition-all ${
                    stealthMode === mode.key
                      ? `border-${mode.color}-500 bg-${mode.color}-900/30`
                      : 'border-gray-600 bg-gray-800/50 hover:border-gray-500'
                  }`}
                >
                  <IconComponent 
                    className={stealthMode === mode.key ? `text-${mode.color}-400` : 'text-gray-400'} 
                    size={24} 
                  />
                  <div className="mt-2">
                    <div className="font-semibold">{mode.name}</div>
                    <div className="text-sm text-gray-400">{mode.desc}</div>
                  </div>
                </button>
              );
            })}
          </div>
        </div>

        {/* T√©cnicas de evasi√≥n individuales */}
        <div className="bg-black/30 backdrop-blur-sm rounded-xl p-6 border border-blue-500/30">
          <h2 className="text-xl font-bold text-blue-300 mb-4 flex items-center gap-2">
            <Zap />
            T√©cnicas de Evasi√≥n Avanzadas
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {Object.entries(stealthTechniques).map(([key, technique]) => {
              const IconComponent = technique.icon;
              const isActive = activeProtections[key];
              
              return (
                <div key={key} className={`p-4 rounded-lg border transition-all ${
                  isActive 
                    ? `border-${technique.color}-500 bg-${technique.color}-900/20` 
                    : 'border-gray-600 bg-gray-800/30'
                }`}>
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center gap-3">
                      <IconComponent 
                        className={isActive ? `text-${technique.color}-400` : 'text-gray-400'} 
                        size={20} 
                      />
                      <div>
                        <div className="font-semibold">{technique.name}</div>
                        <div className="text-sm text-gray-400">‚ö°{technique.energyCost} energ√≠a</div>
                      </div>
                    </div>
                    
                    <button
                      onClick={() => toggleProtection(key)}
                      className={`px-3 py-1 rounded font-semibold transition-colors ${
                        isActive
                          ? 'bg-red-600 hover:bg-red-700 text-white'
                          : 'bg-green-600 hover:bg-green-700 text-white'
                      }`}
                    >
                      {isActive ? 'Desactivar' : 'Activar'}
                    </button>
                  </div>
                  
                  <p className="text-sm text-gray-300 mb-3">{technique.description}</p>
                  
                  <div className="text-xs text-gray-400">
                    <strong>Efectivo contra:</strong> {technique.effectivenessVs.join(', ')}
                  </div>
                </div>
              );
            })}
          </div>
        </div>

        {/* Panel de monitoreo en tiempo real */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Log de seguridad */}
          <div className="bg-black/30 backdrop-blur-sm rounded-xl p-6 border border-green-500/30">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-bold text-green-300 flex items-center gap-2">
                <Activity />
                Log de Seguridad
              </h2>
              <button
                onClick={performSecurityAudit}
                className="px-3 py-1 bg-blue-600 hover:bg-blue-700 rounded text-sm font-semibold"
              >
                Auditor√≠a
              </button>
            </div>
            
            <div className="bg-black/50 rounded-lg p-4 h-64 overflow-y-auto font-mono text-sm">
              {securityLog.length === 0 ? (
                <div className="text-gray-500 text-center py-8">
                  Sistema en standby - Sin eventos de seguridad
                </div>
              ) : (
                securityLog.map(entry => (
                  <div key={entry.id} className={`mb-2 ${
                    entry.type === 'success' ? 'text-green-400' :
                    entry.type === 'warning' ? 'text-yellow-400' : 'text-gray-300'
                  }`}>
                    <span className="text-gray-500">
                      [{entry.timestamp.toLocaleTimeString()}]
                    </span>
                    <span className="ml-2">{entry.message}</span>
                  </div>
                ))
              )}
            </div>
          </div>

          {/* Estado de la red */}
          <div className="bg-black/30 backdrop-blur-sm rounded-xl p-6 border border-purple-500/30">
            <h2 className="text-xl font-bold text-purple-300 mb-4 flex items-center gap-2">
              <Server />
              Estado de Red Segura
            </h2>
            
            <div className="space-y-4">
              <div>
                <div className="flex justify-between text-sm mb-1">
                  <span>Nodos VPN Activos</span>
                  <span>{networkStatus.vpnNodes}</span>
                </div>
                <div className="w-full bg-gray-700 rounded-full h-2">
                  <div 
                    className="bg-blue-500 h-2 rounded-full transition-all duration-300"
                    style={{width: `${Math.min(100, (networkStatus.vpnNodes / 8) * 100)}%`}}
                  ></div>
                </div>
              </div>

              <div>
                <div className="flex justify-between text-sm mb-1">
                  <span>Cadena de Proxies</span>
                  <span>{networkStatus.proxyChain}</span>
                </div>
                <div className="w-full bg-gray-700 rounded-full h-2">
                  <div 
                    className="bg-purple-500 h-2 rounded-full transition-all duration-300"
                    style={{width: `${Math.min(100, (networkStatus.proxyChain / 5) * 100)}%`}}
                  ></div>
                </div>
              </div>

              <div>
                <div className="flex justify-between text-sm mb-1">
                  <span>Encriptaci√≥n</span>
                  <span>{networkStatus.encryptionLevel}-bit</span>
                </div>
                <div className="w-full bg-gray-700 rounded-full h-2">
                  <div 
                    className="bg-green-500 h-2 rounded-full transition-all duration-300"
                    style={{width: `${(networkStatus.encryptionLevel / 256) * 100}%`}}
                  ></div>
                </div>
              </div>

              <div>
                <div className="flex justify-between text-sm mb-1">
                  <span>Puntuaci√≥n de Anonimato</span>
                  <span>{networkStatus.anonymityScore.toFixed(0)}%</span>
                </div>
                <div className="w-full bg-gray-700 rounded-full h-2">
                  <div 
                    className="bg-yellow-500 h-2 rounded-full transition-all duration-300"
                    style={{width: `${networkStatus.anonymityScore}%`}}
                  ></div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Estad√≠sticas y recomendaciones */}
        <div className="bg-black/20 backdrop-blur-sm rounded-xl p-6 border border-gray-500/30">
          <h2 className="text-xl font-bold text-gray-300 mb-4 flex items-center gap-2">
            <Database />
            Inteligencia de Amenazas y Recomendaciones
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
              <h3 className="font-semibold text-blue-300 mb-2">Estad√≠sticas</h3>
              <div className="space-y-1 text-sm">
                <div>Ataques exitosos: {evasionStats.successfulAttacks}</div>
                <div>Intentos bloqueados: {evasionStats.blockedAttempts}</div>
                <div>Detecciones evadidas: {evasionStats.detectionsAvoided}</div>
                <div>Endpoints comprometidos: {evasionStats.compromisedEndpoints}</div>
              </div>
            </div>
            
            <div>
              <h3 className="font-semibold text-yellow-300 mb-2">Amenazas Detectadas</h3>
              <div className="space-y-1 text-sm text-gray-400">
                <div>‚Ä¢ An√°lisis de patrones de tr√°fico</div>
                <div>‚Ä¢ Fingerprinting de dispositivo</div>
                <div>‚Ä¢ Detecci√≥n de comportamiento automatizado</div>
                <div>‚Ä¢ An√°lisis de tiempo de respuesta</div>
              </div>
            </div>
            
            <div>
              <h3 className="font-semibold text-green-300 mb-2">Recomendaciones</h3>
              <div className="space-y-1 text-sm text-gray-400">
                {detectionRisk > 50 && <div>‚Ä¢ Activar m√°s protecciones</div>}
                {!activeProtections.vpnRotation && <div>‚Ä¢ Habilitar rotaci√≥n VPN</div>}
                {!activeProtections.encryptedComms && <div>‚Ä¢ Activar encriptaci√≥n</div>}
                {networkStatus.anonymityScore < 70 && <div>‚Ä¢ Mejorar anonimato</div>}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default StealthSecuritySystem;
