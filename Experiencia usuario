import React, { useState, useEffect, useRef } from 'react';
import { 
  MapPin, 
  Car, 
  AlertTriangle, 
  CheckCircle, 
  Zap, 
  Activity, 
  Target,
  Navigation,
  Clock,
  Users,
  TrendingUp,
  Shield
} from 'lucide-react';

const MobileHunterExperience = () => {
  const [isHunting, setIsHunting] = useState(false);
  const [currentLocation, setCurrentLocation] = useState({ lat: 40.7128, lng: -74.0060 });
  const [speed, setSpeed] = useState(0);
  const [detectedBots, setDetectedBots] = useState([]);
  const [huntingTime, setHuntingTime] = useState(0);
  const [nearbyDrivers, setNearbyDrivers] = useState([]);
  const [alertsToday, setAlertsToday] = useState(0);
  const intervalRef = useRef(null);

  // Simular detección de bots mientras conduces
  useEffect(() => {
    if (isHunting) {
      intervalRef.current = setInterval(() => {
        setHuntingTime(prev => prev + 1);
        
        // Simular movimiento del auto
        setSpeed(Math.random() * 60 + 20); // 20-80 km/h
        setCurrentLocation(prev => ({
          lat: prev.lat + (Math.random() - 0.5) * 0.001,
          lng: prev.lng + (Math.random() - 0.5) * 0.001
        }));

        // Simular detección de bots ocasional
        if (Math.random() < 0.15) { // 15% chance cada segundo
          const newBot = {
            id: `bot_${Date.now()}`,
            platform: ['Uber', 'Instacart', 'DoorDash', 'Amazon Flex'][Math.floor(Math.random() * 4)],
            location: {
              lat: currentLocation.lat + (Math.random() - 0.5) * 0.01,
              lng: currentLocation.lng + (Math.random() - 0.5) * 0.01
            },
            suspiciousActivity: [
              'Respuesta <50ms',
              'Actividad 24/7',
              'Teletransportación GPS',
              'Patrón automatizado',
              'Multi-app simultáneo'
            ][Math.floor(Math.random() * 5)],
            confidence: Math.random() * 0.3 + 0.7, // 70-100%
            timestamp: new Date()
          };
          
          setDetectedBots(prev => [newBot, ...prev.slice(0, 9)]);
          setAlertsToday(prev => prev + 1);
        }

        // Simular drivers cercanos
        if (Math.random() < 0.3) {
          const driver = {
            id: `driver_${Date.now()}`,
            distance: Math.random() * 2 + 0.1, // 0.1-2.1 km
            platform: ['Uber', 'Instacart', 'DoorDash'][Math.floor(Math.random() * 3)],
            status: Math.random() > 0.8 ? 'suspicious' : 'normal',
            responseTime: Math.random() * 1000 + 100 // 100-1100ms
          };
          
          setNearbyDrivers(prev => [driver, ...prev.slice(0, 4)]);
        }
      }, 1000);
    } else {
      clearInterval(intervalRef.current);
    }

    return () => clearInterval(intervalRef.current);
  }, [isHunting, currentLocation]);

  const startHunting = () => {
    setIsHunting(true);
    setHuntingTime(0);
  };

  const stopHunting = () => {
    setIsHunting(false);
  };

  const formatTime = (seconds) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900 text-white">
      {/* Header con estado */}
      <div className="bg-black/30 backdrop-blur-sm border-b border-blue-500/30 p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <Target className={`${isHunting ? 'text-green-400 animate-pulse' : 'text-gray-400'}`} size={24} />
            <div>
              <h1 className="text-xl font-bold">Quantum Bot Hunter</h1>
              <p className="text-sm text-gray-300">
                {isHunting ? '🚗 Cazando bots...' : '⏸️ En pausa'}
              </p>
            </div>
          </div>
          <div className="text-right">
            <div className="text-lg font-bold text-green-400">{alertsToday} Bots</div>
            <div className="text-sm text-gray-300">Detectados hoy</div>
          </div>
        </div>
      </div>

      {/* Panel de control principal */}
      <div className="p-4 space-y-4">
        {/* Botón principal */}
        <div className="text-center">
          <button
            onClick={isHunting ? stopHunting : startHunting}
            className={`w-48 h-48 rounded-full text-2xl font-bold border-4 transition-all duration-300 ${
              isHunting 
                ? 'bg-red-600 hover:bg-red-700 border-red-400 animate-pulse' 
                : 'bg-green-600 hover:bg-green-700 border-green-400'
            }`}
          >
            {isHunting ? (
              <div className="flex flex-col items-center">
                <Activity size={48} className="mb-2" />
                <div>CAZANDO</div>
                <div className="text-lg">{formatTime(huntingTime)}</div>
              </div>
            ) : (
              <div className="flex flex-col items-center">
                <Zap size={48} className="mb-2" />
                <div>INICIAR</div>
                <div>CACERÍA</div>
              </div>
            )}
          </button>
        </div>

        {/* Estadísticas en tiempo real */}
        <div className="grid grid-cols-2 gap-4">
          <div className="bg-black/30 backdrop-blur-sm rounded-xl p-4 border border-blue-500/30">
            <div className="flex items-center gap-2 mb-2">
              <Car className="text-blue-400" size={20} />
              <span className="font-semibold">Tu Vehículo</span>
            </div>
            <div className="space-y-1">
              <div className="text-2xl font-bold text-green-400">{speed.toFixed(0)} km/h</div>
              <div className="text-sm text-gray-300">
                <MapPin size={12} className="inline mr-1" />
                {currentLocation.lat.toFixed(4)}, {currentLocation.lng.toFixed(4)}
              </div>
            </div>
          </div>

          <div className="bg-black/30 backdrop-blur-sm rounded-xl p-4 border border-purple-500/30">
            <div className="flex items-center gap-2 mb-2">
              <Users className="text-purple-400" size={20} />
              <span className="font-semibold">Área Local</span>
            </div>
            <div className="space-y-1">
              <div className="text-2xl font-bold text-purple-400">{nearbyDrivers.length}</div>
              <div className="text-sm text-gray-300">Drivers cerca</div>
            </div>
          </div>
        </div>

        {/* Bots detectados */}
        <div className="bg-black/30 backdrop-blur-sm rounded-xl p-4 border border-red-500/30">
          <div className="flex items-center gap-2 mb-4">
            <AlertTriangle className="text-red-400" size={20} />
            <h2 className="text-lg font-bold text-red-300">Bots Detectados</h2>
          </div>
          
          {detectedBots.length === 0 ? (
            <div className="text-center py-4 text-gray-400">
              <Shield size={32} className="mx-auto mb-2 text-green-400" />
              <p>Área limpia - No se detectaron bots</p>
            </div>
          ) : (
            <div className="space-y-3 max-h-64 overflow-y-auto">
              {detectedBots.map((bot, index) => (
                <div key={bot.id} className="bg-red-900/30 rounded-lg p-3 border border-red-500/20">
                  <div className="flex items-start justify-between mb-2">
                    <div>
                      <div className="font-semibold text-red-200">{bot.platform} Bot</div>
                      <div className="text-xs text-gray-300">
                        {bot.timestamp.toLocaleTimeString()}
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-lg font-bold text-red-400">
                        {(bot.confidence * 100).toFixed(0)}%
                      </div>
                      <div className="text-xs text-gray-300">Confianza</div>
                    </div>
                  </div>
                  <div className="text-sm">
                    <div className="text-yellow-300 mb-1">⚠️ {bot.suspiciousActivity}</div>
                    <div className="text-gray-400">
                      📍 {((Math.random() * 2) + 0.1).toFixed(1)}km de distancia
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Drivers cercanos */}
        <div className="bg-black/30 backdrop-blur-sm rounded-xl p-4 border border-green-500/30">
          <div className="flex items-center gap-2 mb-4">
            <Navigation className="text-green-400" size={20} />
            <h2 className="text-lg font-bold text-green-300">Drivers Cercanos</h2>
          </div>
          
          <div className="space-y-2 max-h-32 overflow-y-auto">
            {nearbyDrivers.slice(0, 3).map((driver, index) => (
              <div key={driver.id} className={`rounded-lg p-2 border ${
                driver.status === 'suspicious' 
                  ? 'bg-yellow-900/30 border-yellow-500/20' 
                  : 'bg-green-900/30 border-green-500/20'
              }`}>
                <div className="flex justify-between items-center">
                  <span className="text-sm">
                    {driver.platform} - {driver.distance.toFixed(1)}km
                  </span>
                  <div className="flex items-center gap-2">
                    <Clock size={12} />
                    <span className="text-xs">{driver.responseTime.toFixed(0)}ms</span>
                    {driver.status === 'suspicious' ? (
                      <AlertTriangle size={14} className="text-yellow-400" />
                    ) : (
                      <CheckCircle size={14} className="text-green-400" />
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Instrucciones de uso */}
        {!isHunting && (
          <div className="bg-black/30 backdrop-blur-sm rounded-xl p-4 border border-gray-500/30">
            <h3 className="text-lg font-bold mb-3 text-gray-300">🚗 Cómo usar:</h3>
            <div className="space-y-2 text-sm text-gray-400">
              <div>1. Súbete a tu auto y arranca</div>
              <div>2. Toca "INICIAR CACERÍA"</div>
              <div>3. Abre tu app de delivery (Uber, Instacart, etc.)</div>
              <div>4. Sal a trabajar normalmente</div>
              <div>5. La app detectará bots automáticamente mientras manejas</div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default MobileHunterExperience;
