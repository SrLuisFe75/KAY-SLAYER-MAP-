import React, { useState, useEffect } from 'react';
import { 
  Skull, 
  Beaker, 
  TrendingDown, 
  Heart,
  AlertTriangle,
  Timer,
  Activity,
  Zap,
  Droplets,
  Thermometer,
  Battery,
  Brain,
  Wifi,
  HardDrive
} from 'lucide-react';

const QuantumPoisonSystem = () => {
  const [targetBots, setTargetBots] = useState([
    {
      id: 'hl1xci',
      platform: 'Amazon Flex',
      type: 'pattern_bot',
      health: 100,
      status: 'healthy',
      efficiency: 95,
      responseTime: 38,
      earnings: 104,
      poisonResistance: 60,
      activePoisons: [],
      lastActivity: new Date(),
      immuneSystem: 75,
      corruptionLevel: 0
    },
    {
      id: 'jogpuw',
      platform: 'DoorDash', 
      type: 'speed_bot',
      health: 100,
      status: 'healthy',
      efficiency: 92,
      responseTime: 20,
      earnings: 385,
      poisonResistance: 45,
      activePoisons: [],
      lastActivity: new Date(),
      immuneSystem: 65,
      corruptionLevel: 0
    }
  ]);

  const [poisonAmmo, setPoisonAmmo] = useState(85);
  const [activePoisonings, setActivePoisonings] = useState([]);

  // Venenos digitales graduales
  const digitalPoisons = {
    'memory_leak': {
      name: 'Fuga de Memoria',
      description: 'Consume gradualmente la RAM del bot',
      energy: 25,
      damagePerTick: 3,
      duration: 300, // 5 minutos
      tickInterval: 15, // cada 15 segundos
      icon: HardDrive,
      color: 'yellow',
      type: 'degenerativo',
      symptoms: ['Lentitud', 'Errores de memoria', 'Crashes']
    },
    'logic_virus': {
      name: 'Virus Lógico',
      description: 'Corrompe gradualmente la toma de decisiones',
      energy: 30,
      damagePerTick: 4,
      duration: 240,
      tickInterval: 20,
      icon: Brain,
      color: 'purple',
      type: 'neurológico',
      symptoms: ['Decisiones erróneas', 'Confusión', 'Loops infinitos']
    },
    'network_toxin': {
      name: 'Toxina de Red',
      description: 'Degrada las conexiones de comunicación',
      energy: 35,
      damagePerTick: 5,
      duration: 180,
      tickInterval: 12,
      icon: Wifi,
      color: 'red',
      type: 'comunicacional',
      symptoms: ['Pérdida de señal', 'Timeouts', 'Desconexiones']
    },
    'battery_drain': {
      name: 'Drenaje de Batería',
      description: 'Agota gradualmente la energía del sistema',
      energy: 20,
      damagePerTick: 2,
      duration: 480, // 8 minutos
      tickInterval: 10,
      icon: Battery,
      color: 'orange',
      type: 'energético',
      symptoms: ['Bajo rendimiento', 'Modo ahorro', 'Apagones']
    },
    'thermal_poison': {
      name: 'Veneno Térmico',
      description: 'Sobrecalienta progresivamente el procesador',
      energy: 40,
      damagePerTick: 6,
      duration: 150,
      tickInterval: 8,
      icon: Thermometer,
      color: 'red',
      type: 'térmico',
      symptoms: ['Sobrecalentamiento', 'Throttling', 'Shutdown térmico']
    },
    'quantum_decay': {
      name: 'Decaimiento Cuántico',
      description: 'Corroe la coherencia cuántica del algoritmo',
      energy: 50,
      damagePerTick: 8,
      duration: 120,
      tickInterval: 6,
      icon: Skull,
      color: 'black',
      type: 'letal',
      symptoms: ['Decoherencia', 'Errores cuánticos', 'Colapso total']
    }
  };

  // Aplicar veneno a un bot
  const applyPoison = (botId, poisonType) => {
    const bot = targetBots.find(b => b.id === botId);
    const poison = digitalPoisons[poisonType];
    
    if (poisonAmmo < poison.energy) {
      alert('☠️ Veneno insuficiente! Necesitas recargar el laboratorio.');
      return;
    }

    setPoisonAmmo(prev => prev - poison.energy);

    const poisoning = {
      id: `poison_${Date.now()}`,
      botId,
      poisonType,
      startTime: new Date(),
      duration: poison.duration,
      damagePerTick: poison.damagePerTick,
      tickInterval: poison.tickInterval,
      ticksRemaining: Math.floor(poison.duration / poison.tickInterval),
      totalDamage: 0,
      status: 'active'
    };

    setActivePoisonings(prev => [...prev, poisoning]);

    // Agregar veneno activo al bot
    setTargetBots(prev => prev.map(b => 
      b.id === botId 
        ? { 
            ...b, 
            activePoisons: [...b.activePoisons, {
              type: poisonType,
              name: poison.name,
              startTime: new Date(),
              symptoms: poison.symptoms
            }],
            status: b.activePoisons.length === 0 ? 'poisoned' : b.status
          }
        : b
    ));
  };

  // Procesar daño de venenos activos
  useEffect(() => {
    const poisonInterval = setInterval(() => {
      setActivePoisonings(prev => {
        const updatedPoisonings = [];
        
        prev.forEach(poisoning => {
          if (poisoning.status === 'active' && poisoning.ticksRemaining > 0) {
            const poison = digitalPoisons[poisoning.poisonType];
            
            // Aplicar daño
            setTargetBots(current => current.map(bot => {
              if (bot.id === poisoning.botId) {
                const resistance = bot.poisonResistance / 100;
                const actualDamage = poisoning.damagePerTick * (1 - resistance);
                const newHealth = Math.max(0, bot.health - actualDamage);
                const newEfficiency = Math.max(0, bot.efficiency - (actualDamage * 0.5));
                const newCorruption = Math.min(100, bot.corruptionLevel + (actualDamage * 0.3));
                
                let newStatus = bot.status;
                if (newHealth <= 30) newStatus = 'critical';
                else if (newHealth <= 60) newStatus = 'deteriorating';
                else if (newHealth < 100) newStatus = 'poisoned';
                
                if (newHealth <= 0) {
                  newStatus = 'destroyed';
                  // Remover venenos activos del bot muerto
                  setActivePoisonings(current => current.filter(p => p.botId !== bot.id));
                }
                
                return {
                  ...bot,
                  health: newHealth,
                  efficiency: newEfficiency,
                  corruptionLevel: newCorruption,
                  status: newStatus,
                  responseTime: bot.responseTime * (1 + (100 - newEfficiency) / 100),
                  earnings: bot.earnings * (newEfficiency / 100)
                };
              }
              return bot;
            }));
            
            // Actualizar envenenamiento
            updatedPoisonings.push({
              ...poisoning,
              ticksRemaining: poisoning.ticksRemaining - 1,
              totalDamage: poisoning.totalDamage + poisoning.damagePerTick
            });
          } else if (poisoning.ticksRemaining <= 0) {
            // Veneno expirado
            setTargetBots(current => current.map(bot => {
              if (bot.id === poisoning.botId) {
                const remainingPoisons = bot.activePoisons.filter(p => p.type !== poisoning.poisonType);
                return {
                  ...bot,
                  activePoisons: remainingPoisons,
                  status: remainingPoisons.length === 0 && bot.health > 0 ? 'recovering' : bot.status
                };
              }
              return bot;
            }));
          }
        });
        
        return updatedPoisonings;
      });
    }, 5000); // Revisar cada 5 segundos

    return () => clearInterval(poisonInterval);
  }, []);

  // Recarga de venenos
  useEffect(() => {
    const rechargeInterval = setInterval(() => {
      setPoisonAmmo(prev => Math.min(100, prev + 2));
    }, 3000);

    return () => clearInterval(rechargeInterval);
  }, []);

  const getStatusColor = (status) => {
    switch (status) {
      case 'healthy': return 'text-green-400';
      case 'poisoned': return 'text-yellow-400';
      case 'deteriorating': return 'text-orange-400';
      case 'critical': return 'text-red-400';
      case 'destroyed': return 'text-gray-400';
      case 'recovering': return 'text-blue-400';
      default: return 'text-gray-400';
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'healthy': return <Heart className="text-green-400" size={16} />;
      case 'poisoned': return <Droplets className="text-yellow-400" size={16} />;
      case 'deteriorating': return <TrendingDown className="text-orange-400" size={16} />;
      case 'critical': return <AlertTriangle className="text-red-400" size={16} />;
      case 'destroyed': return <Skull className="text-gray-400" size={16} />;
      case 'recovering': return <Activity className="text-blue-400" size={16} />;
      default: return <AlertTriangle className="text-gray-400" size={16} />;
    }
  };

  const activeBots = targetBots.filter(bot => bot.status !== 'destroyed').length;
  const destroyedBots = targetBots.filter(bot => bot.status === 'destroyed').length;
  const poisonedBots = targetBots.filter(bot => bot.activePoisons.length > 0).length;

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-900 via-gray-900 to-black text-white p-4">
      <div className="max-w-6xl mx-auto">
        {/* Header del laboratorio de venenos */}
        <div className="bg-black/40 backdrop-blur-sm rounded-xl p-6 border border-green-500/30 mb-6">
          <div className="flex items-center gap-3 mb-4">
            <Beaker className="text-green-400 animate-pulse" size={32} />
            <div>
              <h1 className="text-2xl font-bold text-green-300">Laboratorio de Venenos Cuánticos ☠️</h1>
              <p className="text-gray-300">Debilitamiento gradual y eliminación digital</p>
            </div>
          </div>
          
          {/* Stock de venenos */}
          <div>
            <div className="flex justify-between text-sm mb-1">
              <span>Venenos Digitales Disponibles</span>
              <span>{poisonAmmo}%</span>
            </div>
            <div className="w-full bg-gray-700 rounded-full h-3">
              <div 
                className="bg-gradient-to-r from-green-500 to-red-500 h-3 rounded-full transition-all duration-300"
                style={{width: `${poisonAmmo}%`}}
              ></div>
            </div>
          </div>
        </div>

        {/* Estadísticas del laboratorio */}
        <div className="grid grid-cols-4 gap-4 mb-6">
          <div className="bg-green-900/30 backdrop-blur-sm rounded-xl p-4 border border-green-500/30">
            <div className="text-center">
              <Heart className="mx-auto mb-2 text-green-400" size={24} />
              <div className="text-2xl font-bold text-green-400">{activeBots}</div>
              <div className="text-sm text-gray-300">Bots Vivos</div>
            </div>
          </div>

          <div className="bg-yellow-900/30 backdrop-blur-sm rounded-xl p-4 border border-yellow-500/30">
            <div className="text-center">
              <Droplets className="mx-auto mb-2 text-yellow-400" size={24} />
              <div className="text-2xl font-bold text-yellow-400">{poisonedBots}</div>
              <div className="text-sm text-gray-300">Envenenados</div>
            </div>
          </div>

          <div className="bg-red-900/30 backdrop-blur-sm rounded-xl p-4 border border-red-500/30">
            <div className="text-center">
              <Skull className="mx-auto mb-2 text-red-400" size={24} />
              <div className="text-2xl font-bold text-red-400">{destroyedBots}</div>
              <div className="text-sm text-gray-300">Eliminados</div>
            </div>
          </div>

          <div className="bg-purple-900/30 backdrop-blur-sm rounded-xl p-4 border border-purple-500/30">
            <div className="text-center">
              <Beaker className="mx-auto mb-2 text-purple-400" size={24} />
              <div className="text-2xl font-bold text-purple-400">{activePoisonings.length}</div>
              <div className="text-sm text-gray-300">Venenos Activos</div>
            </div>
          </div>
        </div>

        {/* Bots objetivo */}
        <div className="space-y-4">
          {targetBots.map(bot => (
            <div key={bot.id} className={`bg-black/30 backdrop-blur-sm rounded-xl p-6 border ${
              bot.status === 'destroyed' 
                ? 'border-gray-500/30 opacity-50' 
                : bot.status === 'critical'
                ? 'border-red-500/30'
                : bot.status === 'deteriorating'
                ? 'border-orange-500/30'
                : bot.status === 'poisoned'
                ? 'border-yellow-500/30'
                : 'border-green-500/30'
            }`}>
              
              {/* Header del bot */}
              <div className="flex justify-between items-start mb-4">
                <div>
                  <div className="flex items-center gap-2 mb-2">
                    {getStatusIcon(bot.status)}
                    <h3 className="text-xl font-bold text-white">
                      {bot.platform} Bot #{bot.id}
                    </h3>
                    <span className={`text-sm capitalize ${getStatusColor(bot.status)}`}>
                      {bot.status}
                    </span>
                  </div>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                    <div>Tipo: {bot.type.replace('_', ' ')}</div>
                    <div>Respuesta: {bot.responseTime.toFixed(0)}ms</div>
                    <div>Ganancias: ${bot.earnings.toFixed(0)}/día</div>
                    <div>Resistencia: {bot.poisonResistance}%</div>
                  </div>
                </div>
                
                <div className="text-right">
                  <div className="text-2xl font-bold text-red-400">{bot.health.toFixed(0)}%</div>
                  <div className="text-sm text-gray-300">Salud</div>
                </div>
              </div>

              {/* Barras de estado */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                <div>
                  <div className="flex justify-between text-xs mb-1">
                    <span>Salud</span>
                    <span>{bot.health.toFixed(0)}%</span>
                  </div>
                  <div className="w-full bg-gray-700 rounded-full h-2">
                    <div 
                      className={`h-2 rounded-full transition-all duration-300 ${
                        bot.health > 60 ? 'bg-green-500' : bot.health > 30 ? 'bg-yellow-500' : 'bg-red-500'
                      }`}
                      style={{width: `${bot.health}%`}}
                    ></div>
                  </div>
                </div>

                <div>
                  <div className="flex justify-between text-xs mb-1">
                    <span>Eficiencia</span>
                    <span>{bot.efficiency.toFixed(0)}%</span>
                  </div>
                  <div className="w-full bg-gray-700 rounded-full h-2">
                    <div 
                      className="bg-blue-500 h-2 rounded-full transition-all duration-300"
                      style={{width: `${bot.efficiency}%`}}
                    ></div>
                  </div>
                </div>

                <div>
                  <div className="flex justify-between text-xs mb-1">
                    <span>Corrupción</span>
                    <span>{bot.corruptionLevel.toFixed(0)}%</span>
                  </div>
                  <div className="w-full bg-gray-700 rounded-full h-2">
                    <div 
                      className="bg-purple-500 h-2 rounded-full transition-all duration-300"
                      style={{width: `${bot.corruptionLevel}%`}}
                    ></div>
                  </div>
                </div>
              </div>

              {/* Venenos activos */}
              {bot.activePoisons.length > 0 && (
                <div className="bg-red-900/30 rounded-lg p-3 mb-4 border border-red-500/20">
                  <h5 className="font-semibold text-red-300 mb-2">☠️ Venenos Activos:</h5>
                  <div className="space-y-1">
                    {bot.activePoisons.map((poison, index) => (
                      <div key={index} className="text-sm">
                        <span className="text-red-400">{poison.name}</span>
                        <div className="text-xs text-gray-400 ml-2">
                          Síntomas: {poison.symptoms.join(', ')}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Arsenál de venenos */}
              {bot.status !== 'destroyed' && (
                <div>
                  <h4 className="font-semibold text-green-300 mb-3">☠️ Arsenál de Venenos Digitales:</h4>
                  <div className="grid grid-cols-2 lg:grid-cols-3 gap-3">
                    {Object.entries(digitalPoisons).map(([key, poison]) => {
                      const IconComponent = poison.icon;
                      const canAfford = poisonAmmo >= poison.energy;
                      const alreadyPoisoned = bot.activePoisons.some(p => p.type === key);
                      
                      return (
                        <button
                          key={key}
                          onClick={() => applyPoison(bot.id, key)}
                          disabled={!canAfford || alreadyPoisoned}
                          className={`p-3 rounded-lg border transition-all ${
                            alreadyPoisoned
                              ? 'bg-gray-600 border-gray-400 opacity-50'
                              : canAfford
                              ? `bg-${poison.color}-600 border-${poison.color}-400 hover:bg-${poison.color}-700`
                              : 'bg-gray-600 border-gray-400 opacity-50 cursor-not-allowed'
                          }`}
                        >
                          <div className="flex items-center gap-2 mb-1">
                            <IconComponent size={16} />
                            <span className="font-semibold text-sm">{poison.name}</span>
                          </div>
                          <div className="text-xs text-left">
                            <div>☠️{poison.energy} | 💀{poison.damagePerTick}/tick</div>
                            <div>⏰{Math.floor(poison.duration/60)}min | 🔄{poison.tickInterval}s</div>
                            <div className="text-gray-200 mt-1">{poison.description}</div>
                            {alreadyPoisoned && (
                              <div className="text-red-300 font-semibold mt-1">
                                YA ENVENENADO
                              </div>
                            )}
                          </div>
                        </button>
                      );
                    })}
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>

        {/* Manual de venenos */}
        <div className="mt-6 bg-black/20 backdrop-blur-sm rounded-xl p-6 border border-gray-500/30">
          <h3 className="text-lg font-bold mb-4 text-gray-300 flex items-center gap-2">
            <Beaker />
            ☠️ Manual de Venenos Digitales
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
            <div>
              <strong className="text-green-300">Venenos Graduales:</strong>
              <p className="text-gray-400">• Daño constante por intervalos de tiempo</p>
              <p className="text-gray-400">• Reducen salud, eficiencia y aumentan corrupción</p>
              <p className="text-gray-400">• Diferentes tipos atacan diferentes sistemas</p>
            </div>
            <div>
              <strong className="text-red-300">Estrategia Letal:</strong>
              <p className="text-gray-400">• Combina múltiples venenos para máximo efecto</p>
              <p className="text-gray-400">• Venenos térmicos y cuánticos son más letales</p>
              <p className="text-gray-400">• Resistencia del bot reduce el daño</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default QuantumPoisonSystem;
